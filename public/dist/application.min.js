"use strict";var ApplicationConfiguration=function(){var applicationModuleName="TDS",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("codes"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("ecustomers"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("reasons"),ApplicationConfiguration.registerModule("record-statuses"),ApplicationConfiguration.registerModule("users"),angular.module("codes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Clients","codes","dropdown","/codes(/create)?",!1,["superadmin","admin","operator"]),Menus.addSubMenuItem("topbar","codes","List Registered Clients by Voyage","codes"),Menus.addSubMenuItem("topbar","codes","Register Client","codes/create"),Menus.addSubMenuItem("topbar","codes","List Client","ecustomers"),Menus.addSubMenuItem("topbar","codes","New Client","ecustomers/create")}]),angular.module("codes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCodes",{url:"/codes?group",templateUrl:"modules/codes/views/list-codes.client.view.html"}).state("createCode",{url:"/codes/create",templateUrl:"modules/codes/views/create-code.client.view.html"}).state("viewCode",{url:"/codes/:codeId",templateUrl:"modules/codes/views/view-code.client.view.html"}).state("editCode",{url:"/codes/:codeId/edit",templateUrl:"modules/codes/views/edit-code.client.view.html"})}]),angular.module("codes").controller("CodesController",["$scope","$stateParams","$location","Authentication","Codes",function($scope,$stateParams,$location,Authentication,Codes){$scope.authentication=Authentication,$scope.create=function(){var code=new Codes({name:this.name});code.$save(function(response){$location.path("codes/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(code){if(code){code.$remove();for(var i in $scope.codes)$scope.codes[i]===code&&$scope.codes.splice(i,1)}else $scope.code.$remove(function(){$location.path("codes")})},$scope.update=function(){var code=$scope.code;code.$update(function(){$location.path("codes/"+code._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.codes=Codes.query()},$scope.findOne=function(){$scope.code=Codes.get({codeId:$stateParams.codeId})}}]),angular.module("codes").controller("CodesCreateController",["$scope","$stateParams","$location","$http","Authentication","Alerts","Codes","Ecustomers",function($scope,$stateParams,$location,$http,Authentication,Alerts,Codes,Ecustomers){$scope.authentication=Authentication,$scope.addNewEcustomer=!1,$scope.init=function(){$scope.fillGroups(),$scope.fillEcustomers(),$scope.selectedMode="single",$scope.codeType="datamatrix"},$scope.fillEcustomers=function(){$http.get("/ecustomers").success(function(items){$scope.ecustomers=items}).error(function(message){console.log(message)})},$scope.addEcustomer=function(){$scope.newCode=angular.fromJson($scope.newCode)},$scope.fillCodeTypes=function(){$scope.codeTypes=["azteccode","datamatrix","qrcode","code128"]},$scope.fillGroups=function(){$http.get("/groups").success(function(items){$scope.groups=items,$scope.initFirstGroup()}).error(function(message){console.log(message)})},$scope.initFirstGroup=function(){$scope.groups.length>0&&($scope.selectedGroup=$scope.groups[0],$scope.groupChanges())},$scope.groupChanges=function(){$scope.selectedGroup&&($scope.selectedGroupObject=angular.fromJson($scope.selectedGroup),$scope.newCode={})},$scope.init_single=function(){$scope.newCode={}},$scope.init_multiple=function(){$scope.amountOfRowCodes=1},$scope.createMultiple=function(){$scope.loadImgs=!0,$http.put("/codes",{group:$scope.selectedGroupObject._id,codeType:$scope.codeType,amount:$scope.amountOfRowCodes}).success(function(data){Alerts.success(),$scope.loadImgs=!1,location.href="data:application/zip;base64,"+data}).error(function(err){Alerts.fail(err),$scope.error=err}),$scope.amountOfRowCodes=1},$scope.create=function(){var regex_date=/^\d{4}\/\d{1,2}\/\d{1,2}$/;if(!regex_date.test($scope.newCode.Date_de_naissance))return void Alerts.fail("Date format error!");var code=new Codes({codeType:$scope.codeType,group:$scope.selectedGroupObject._id,data:JSON.stringify($scope.newCode)});if($scope.addNewEcustomer){var ecustomer=new Ecustomers($scope.newCode);ecustomer.$save(function(response){$scope.fillEcustomers()})}$http.post("/codes",code).success(function(data){Alerts.success();var anchor=angular.element("<a/>");anchor.attr({href:"data:image/png;base64,"+encodeURI(data),target:"_blank",download:"new_"+$scope.selectedGroupObject.name+".png"})[0].click(),$scope.newCode={}}).error(function(err){Alerts.fail(err),$scope.error=err})}}]),angular.module("codes").controller("CodesManagementController",["$scope","$stateParams","$location","$timeout","$http","$filter","$modal","Authentication","Alerts","Codes",function($scope,$stateParams,$location,$timeout,$http,$filter,$modal,Authentication,Alerts,Codes){var pagingFilter,searchTimer,calculate=function(partA,partB,opt){switch(opt){case"+":return partA+partB;case"-":return partA-partB;case"*":return partA*partB;case"/":return partA/partB;default:return"-"}};$scope.authentication=Authentication,$scope.jumpCreate=function(){$location.path("codes/create")},$scope.calculate=function(partA,partB,opt1,partC,opt2){var value;return partA=1*partA,partB=1*partB,value=calculate(partA,partB,opt1),partC&&opt2&&(partC=1*partC,value=calculate(value,partC,opt2)),value},$scope["export"]=function(){$http.post("/codes/manage/export",{groupId:$scope.selectedGroupObject._id,groupName:$scope.selectedGroupObject.name,fields:$scope.selectedGroupObject.fields}).then(function(data){Alerts.success();var anchor=angular.element("<a/>");anchor.attr({href:"data:text/csv,"+encodeURI(data.data),target:"_blank",download:"Data_"+$scope.selectedGroupObject.name+".csv"})[0].click()},function(err){Alerts.fail(err)})},$scope.initialPagining=function(){pagingFilter=$filter("PagingFilter"),$scope.startIndex=1,$scope.pagination={initial:!1,currentOption:"all",count:1,limit:7,page:1,limitOptions:[5,10,20]}};var rebuildPagination=function(newCount){if($scope.pagination.count===newCount&&$scope.pagination.initial)return void($scope.pagination.displayPagings=pagingFilter($scope.pagination.pagings,$scope.pagination.page));$scope.pagination.initial=!0,$scope.pagination.count=newCount,$scope.pagination.pagings=[];for(var i=0;newCount>i;i++)$scope.pagination.pagings[i]=i+1;$scope.pagination.displayPagings=pagingFilter($scope.pagination.pagings,$scope.pagination.page)},convertCodeDate=function(codes){for(var i=0;i<codes.length;i++)codes[i].data=angular.fromJson(codes[i].data);$scope.codes=codes};$scope.init=function(){$scope.initialPagining(),$scope.fillGroups(),$scope.fillStatus(),$scope.currentOption="all",$scope.codeType="datamatrix",$scope.searchObj={}},$scope.initFirstGroup=function(){var id=$stateParams.group;if($scope.groups.length>0){$scope.selectedGroup=$scope.groups[0];for(var i=0;i<$scope.groups.length;i++)if($scope.groups[i]._id===id){$scope.selectedGroup=$scope.groups[i];break}$scope.groupChanges()}},$scope.fillGroups=function(){$http.get("/groups").success(function(items){$scope.groups=items,$scope.initFirstGroup()}).error(function(message){console.log(message)})},$scope.fillCodeTypes=function(){$scope.codeTypes=["azteccode","datamatrix","qrcode","code128"]},$scope.fillStatus=function(){$http.get("/record-statuses").success(function(items){for(var names=[],i=0;i<items.length;i++)names.push(items[i].name);$scope.statuses=names}).error(function(message){console.log(message)})},$scope.groupChanges=function(){$scope.selectedGroup&&($scope.selectedGroupObject=angular.fromJson($scope.selectedGroup),$scope.selectedGroupObject.calcs&&($scope.selectedGroupObject.calcs=angular.fromJson($scope.selectedGroupObject.calcs)),$scope.count($scope.authentication.user._id,$scope.selectedGroupObject._id),$scope.find($scope.currentOption,$scope.startIndex,$scope.pagination.limit))},$scope.search=function(){searchTimer&&$timeout.cancel(searchTimer),searchTimer=$timeout(function(){$scope.searchObj.raw=$scope.currentOption,$scope.find("search",$scope.startIndex,$scope.pagination.limit,$scope.searchObj)},150),console.log($scope.searchObj)},$scope.count=function(user,group){$http.post("/codes/manage/count",{group:group,user:user}).success(function(response){$scope.countInfo=response})},$scope.find=function(option,page,limit,searchBody){page>$scope.pagination.count||1>page||$http.post("/codes/manage/match",searchBody,{params:{option:option,group:$scope.selectedGroupObject._id,page:page,limit:limit}}).success(function(codeInfo){convertCodeDate(codeInfo.data),$scope.pagination.currentOption=option,$scope.pagination.page=codeInfo.currentPage,rebuildPagination(codeInfo.count)})},$scope.functionEdit=function(code){var originalCode=JSON.stringify(code),modalInstance=$modal.open({animation:!0,templateUrl:"modules/codes/views/edit.modal.view.html",controller:"EditModalInstanceCtrl",resolve:{code:function(){return angular.fromJson(originalCode)},group:function(){return $scope.selectedGroupObject},statuses:function(){return $scope.statuses}}});modalInstance.result.then(function(updatedCode){updatedCode.data=JSON.stringify(updatedCode.data),$scope.update(updatedCode)},function(){console.log("dismiss")})},$scope.openFile=function(code){var modalInstance=$modal.open({animation:!0,backdrop:"static",templateUrl:"modules/codes/views/file.modal.view.html",controller:"FileModalInstanceCtrl",resolve:{code:function(){return code}}});modalInstance.result.then(function(updatedCode){$scope.find($scope.currentOption,$scope.pagination.page,$scope.pagination.limit)},function(){console.log("dismiss")})},$scope.functionDelete=function(code){var modalInstance=$modal.open({animation:!0,templateUrl:"modules/groups/views/delete.modal.view.html",controller:"DeleteModalInstanceCtrl",resolve:{uid:function(){return"Code: "+code.UID},message:function(){return""}}});modalInstance.result.then(function(){$scope.remove(code)},function(){console.log("dismiss")})},$scope.functionGenerate=function(code){$http.post("/generate",{type:$scope.codeType,text:code.UID,scale:1}).success(function(response){Alerts.success();var anchor=angular.element("<a/>");anchor.attr({href:"data:image/png;base64,"+encodeURI(response),target:"_blank",download:code.UID+".png"})[0].click()}).error(function(response){Alerts.fail(response)})},$scope.remove=function(code){code&&$http["delete"]("/codes/"+code._id).success(function(response){Alerts.success();for(var i in $scope.codes)$scope.codes[i]===code&&$scope.codes.splice(i,1)}).error(function(response){Alerts.fail(response)})},$scope.update=function(code){$http.put("/codes/"+code._id,code).success(function(response){$scope.find($scope.currentOption,$scope.pagination.page,$scope.pagination.limit),Alerts.success()}).error(function(response){$scope.error=response.data.message,Alerts.fail(response)})},$scope.findOne=function(){$scope.code=Codes.get({codeId:$stateParams.codeId})}}]),angular.module("codes").controller("datepickerCtrl",["$scope","$rootScope",function($scope,$rootScope){$scope.date=new Date,$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0}}]),angular.module("codes").controller("EditModalInstanceCtrl",["$scope","$modalInstance","code","group","statuses",function($scope,$modalInstance,code,group,statuses){$scope.init=function(){$scope.code=code,$scope.group=group,$scope.statuses=statuses},$scope.ok=function(){$modalInstance.close($scope.code)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("codes").controller("FileModalInstanceCtrl",["$scope","$http","$modalInstance","FileUploader","code",function($scope,$http,$modalInstance,FileUploader,code){$scope.init=function(){$scope.code=code},$scope["delete"]=function(uid){$http["delete"]("/upload/"+code._id,{params:{uid:uid}}).then(function(data){data.data&&($scope.code=data.data)},function(err){$scope.result="Delete Error",console.info("Delete error:",err)})},$scope.download=function(uid){window.open("/download?uid="+uid,"_self","")};var uploader=$scope.uploader=new FileUploader({url:"/upload/"+code._id});uploader.filters.push({name:"lengthFilter",fn:function(item,options){return this.queue.length<1}}),uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.code=response,fileItem.remove()},uploader.onErrorItem=function(fileItem,response,status,headers){$scope.result="Upload Fail"},uploader.onCompleteAll=function(){$scope.result="Success"},uploader.onWhenAddingFileFailed=function(item,filter,options){$scope.result="Adding Fail",uploader.clearQueue()},uploader.onAfterAddingFile=function(fileItem){$scope.result="Adding Success"},$scope.ok=function(){$modalInstance.close($scope.code)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("codes").filter("PagingFilter",function(){return function(input,index){return input.length<=10?input:5>=index?input.slice(0,10):input.length-index<5?input.slice(input.length-10):input.slice(index-5,index+5)}}),angular.module("codes").factory("Codes",["$resource",function($resource){return $resource("codes/:codeId",{codeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("AlertsController",["$scope","Alerts",function($scope,Alerts){$scope.failReason="55555555555555555",Alerts.listen($scope)}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.authentication=Authentication,$scope.credentials={},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("core").service("Alerts",["$timeout","$rootScope","$filter",function($timeout,$rootScope,$filter){this.listen=function($scope){$scope.$on("success",function(event){$scope.successAlert=!0;var timeout=$timeout(function(){$scope.successAlert=!1,$timeout.cancel(timeout)},2e3)}),$scope.$on("fail",function(event,message){$scope.failAlert=!0,$scope.failReason=$filter("limitTo")(message,30);var timeout=$timeout(function(){$scope.failAlert=!1,$scope.failReason=void 0,$timeout.cancel(timeout)},2e3)})},this.success=function(){$rootScope.$broadcast("success")},this.fail=function(message){$rootScope.$broadcast("fail",message)}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("ecustomers").run(["Menus",function(Menus){}]),angular.module("ecustomers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listEcustomers",{url:"/ecustomers",templateUrl:"modules/ecustomers/views/list-ecustomers.client.view.html"}).state("createEcustomer",{url:"/ecustomers/create",templateUrl:"modules/ecustomers/views/create-ecustomer.client.view.html"}).state("viewEcustomer",{url:"/ecustomers/:ecustomerId",templateUrl:"modules/ecustomers/views/view-ecustomer.client.view.html"}).state("editEcustomer",{url:"/ecustomers/:ecustomerId/edit",templateUrl:"modules/ecustomers/views/edit-ecustomer.client.view.html"})}]),angular.module("ecustomers").controller("EcustomersController",["$scope","$stateParams","$location","Authentication","Ecustomers","Alerts",function($scope,$stateParams,$location,Authentication,Ecustomers,Alerts){$scope.authentication=Authentication,$scope.fixFields=["Nom","Prenom","Date_de_naissance","Lieu_de_naissance","Addressee","Telephone_mobile","Telephone_Fix","Fax","email","facebook","twitter","Autre_1","Autre_2","Observation"],$scope.init=function(){$scope.ecustomer={}},$scope.edit=function(id){$location.path("ecustomers/"+id+"/edit")},$scope.create=function(){if(!$scope.ecustomer||!$scope.ecustomer.Nom||!$scope.ecustomer.Prenom)return void Alerts.fail("Nom or Prenom can not be empty!");var regex_date=/^\d{4}\/\d{1,2}\/\d{1,2}$/;if($scope.ecustomer.Date_de_naissance&&!regex_date.test($scope.ecustomer.Date_de_naissance))return void Alerts.fail("Date format yyyy/mm/dd!");var ecustomer=new Ecustomers($scope.ecustomer);ecustomer.$save(function(response){$location.path("ecustomers"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(ecustomer){if(ecustomer){ecustomer.$remove();for(var i in $scope.ecustomers)$scope.ecustomers[i]===ecustomer&&$scope.ecustomers.splice(i,1)}else $scope.ecustomer.$remove(function(){$location.path("ecustomers")})},$scope.update=function(){var ecustomer=$scope.ecustomer;ecustomer.$update(function(){$location.path("ecustomers")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.ecustomers=Ecustomers.query()},$scope.findOne=function(){$scope.ecustomer=Ecustomers.get({ecustomerId:$stateParams.ecustomerId})}}]),angular.module("ecustomers").factory("Ecustomers",["$resource",function($resource){return $resource("ecustomers/:ecustomerId",{ecustomerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("groups").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Voyages","groups","dropdown","/groups(/create)?",!1,["superadmin","admin","operator"]),Menus.addSubMenuItem("topbar","groups","Gestion des Voyages","groups"),Menus.addSubMenuItem("topbar","groups","Ajouter Voyage","groups/create")}]),angular.module("groups").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGroups",{url:"/groups",templateUrl:"modules/groups/views/list-groups.client.view.html"}).state("createGroup",{url:"/groups/create",templateUrl:"modules/groups/views/create-group.client.view.html"}).state("viewGroup",{url:"/groups/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("editGroup",{url:"/groups/:groupId/edit",templateUrl:"modules/groups/views/edit-group.client.view.html"})}]),angular.module("groups").controller("DeleteModalInstanceCtrl",["$scope","$modalInstance","uid","message",function($scope,$modalInstance,uid,message){$scope.init=function(){$scope.uid=uid,$scope.message=message},$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("groups").controller("GroupsController",["$scope","$stateParams","$state","$modal","$location","$http","Authentication","Alerts","Groups",function($scope,$stateParams,$state,$modal,$location,$http,Authentication,Alerts,Groups){$scope.authentication=Authentication,$scope.fixFields=[{value:"Nom"},{value:"Prenom"},{value:"Date_de_naissance"},{value:"Lieu_de_naissance"},{value:"Addressee"},{value:"Telephone_mobile"},{value:"Telephone_Fix"},{value:"Fax"},{value:"email"},{value:"facebook"},{value:"twitter"},{value:"Autre_1"},{value:"Autre_2"},{value:"Observation"}],$scope.fillFields=function(){$scope.fields=[{value:"FieldA"},{value:"FieldB"}],$scope.calcs=[],$scope.calcs=[],$scope.operators=["+","-","*","/"]},$scope.addCalc=function(){$scope.calcs.push({name:"CalcName",partA:$scope.fields[0].value,partB:$scope.fields[0].value,operator1:$scope.operators[0]})},$scope.removeCalc=function(item){$scope.calcs.splice($scope.calcs.indexOf(item),1)},$scope.addFieled=function(){$scope.fields.push({value:"FieldNew"})},$scope.removeFieled=function(item){$scope.fields.splice($scope.fields.indexOf(item),1)},$scope.jump=function(id){$location.path("groups/"+id+"/edit")},$scope.jumpCreate=function(){$location.path("groups/create")},$scope.go=function(group){$state.go("listCodes",{group:group._id})},$scope.deleteConfirm=function(group){var modalInstance=$modal.open({animation:!0,templateUrl:"modules/groups/views/delete.modal.view.html",controller:"DeleteModalInstanceCtrl",resolve:{uid:function(){return group.name},message:function(){return"This action will remove also all code recrods related to this group."}}});modalInstance.result.then(function(){$scope.remove(group)},function(){console.log("dismiss")})},$scope["export"]=function(group){$http.post("/codes/manage/export",{groupId:group._id,groupName:group.name,fields:group.fields}).then(function(data){Alerts.success();var anchor=angular.element("<a/>");anchor.attr({href:"data:text/csv,"+encodeURI(data.data),target:"_blank",download:"Data_"+group.name+".csv"})[0].click()},function(err){Alerts.fail(err)})},$scope.create=function(){for(var fields=[],calcs="",i=0;i<$scope.fixFields.length;i++)-1===fields.indexOf($scope.fixFields[i].value)&&fields.push($scope.fixFields[i].value);if($scope.fields&&$scope.fields.length>0)for(i=0;i<$scope.fields.length;i++)-1===fields.indexOf($scope.fields[i].value)&&fields.push($scope.fields[i].value);$scope.calcs.length>0&&(calcs=angular.toJson($scope.calcs));var group=new Groups({name:this.name,fields:fields,calcs:calcs});group.$save(function(response){$location.path("groups"),Alerts.success(),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message,Alerts.fail(errorResponse.data.message)})},$scope.remove=function(group){if(group){group.$remove(),Alerts.success();for(var i in $scope.groups)$scope.groups[i]===group&&$scope.groups.splice(i,1)}else $scope.group.$remove(function(){Alerts.success(),$location.path("groups")})},$scope.update=function(){var group=$scope.group;group.$update(function(){Alerts.success(),$location.path("groups")},function(errorResponse){$scope.error=errorResponse.data.message,Alerts.fail(errorResponse.data.message)})},$scope.find=function(){$scope.groups=Groups.query()},$scope.findOne=function(){$scope.group=Groups.get({groupId:$stateParams.groupId})}}]),angular.module("groups").factory("Groups",["$resource",function($resource){return $resource("groups/:groupId",{groupId:"@_id"},{update:{method:"PUT"}})}]);var validRoles=["admin"],isPublic=!1;angular.module("reasons").config(["$stateProvider",function($stateProvider){$stateProvider.state("listReasons",{url:"/reasons",templateUrl:"modules/reasons/views/list-reasons.client.view.html"}).state("createReason",{url:"/reasons/create",templateUrl:"modules/reasons/views/create-reason.client.view.html"}).state("viewReason",{url:"/reasons/:reasonId",templateUrl:"modules/reasons/views/view-reason.client.view.html"}).state("editReason",{url:"/reasons/:reasonId/edit",templateUrl:"modules/reasons/views/edit-reason.client.view.html"})}]),angular.module("reasons").controller("ReasonsController",["$scope","$stateParams","$location","Authentication","Reasons",function($scope,$stateParams,$location,Authentication,Reasons){$scope.authentication=Authentication,$scope.create=function(){var reason=new Reasons({name:this.name});reason.$save(function(response){$location.path("reasons"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(reason){if(reason){reason.$remove();for(var i in $scope.reasons)$scope.reasons[i]===reason&&$scope.reasons.splice(i,1)}else $scope.reason.$remove(function(){$location.path("reasons")})},$scope.update=function(){var reason=$scope.reason;reason.$update(function(){$location.path("reasons/"+reason._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.reasons=Reasons.query()},$scope.findOne=function(){$scope.reason=Reasons.get({reasonId:$stateParams.reasonId})}}]),angular.module("reasons").factory("Reasons",["$resource",function($resource){return $resource("reasons/:reasonId",{reasonId:"@_id"},{update:{method:"PUT"}})}]),angular.module("record-statuses").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Index","record-statuses","dropdown","/record-statuses(/create)?",!1,["superadmin","admin","operator"]),Menus.addSubMenuItem("topbar","record-statuses","Gestion des Index","record-statuses"),Menus.addSubMenuItem("topbar","record-statuses","Ajouter Index","record-statuses/create")}]),angular.module("record-statuses").config(["$stateProvider",function($stateProvider){$stateProvider.state("listRecordStatuses",{url:"/record-statuses",templateUrl:"modules/record-statuses/views/list-record-statuses.client.view.html"}).state("createRecordStatus",{url:"/record-statuses/create",templateUrl:"modules/record-statuses/views/create-record-status.client.view.html"}).state("viewRecordStatus",{url:"/record-statuses/:recordStatusId",templateUrl:"modules/record-statuses/views/view-record-status.client.view.html"}).state("editRecordStatus",{url:"/record-statuses/:recordStatusId/edit",templateUrl:"modules/record-statuses/views/edit-record-status.client.view.html"})}]),angular.module("record-statuses").controller("RecordStatusesController",["$scope","$stateParams","$modal","$location","Authentication","Alerts","RecordStatuses",function($scope,$stateParams,$modal,$location,Authentication,Alerts,RecordStatuses){$scope.authentication=Authentication,$scope.jump=function(id){$location.path("record-statuses/"+id+"/edit")},$scope.jumpCreate=function(){$location.path("record-statuses/create")},$scope.deleteConfirm=function(entity){var modalInstance=$modal.open({animation:!0,templateUrl:"modules/groups/views/delete.modal.view.html",controller:"DeleteModalInstanceCtrl",resolve:{uid:function(){return entity.name},message:function(){return""}}});modalInstance.result.then(function(){$scope.remove(entity)},function(){console.log("dismiss")})},$scope.create=function(){var recordStatus=new RecordStatuses({name:this.name});recordStatus.$save(function(response){$location.path("record-statuses"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(recordStatus){if(recordStatus){recordStatus.$remove(),Alerts.success();for(var i in $scope.recordStatuses)$scope.recordStatuses[i]===recordStatus&&$scope.recordStatuses.splice(i,1)}else $scope.recordStatus.$remove(function(){Alerts.success(),$location.path("record-statuses")})},$scope.update=function(){var recordStatus=$scope.recordStatus;recordStatus.$update(function(){$location.path("record-statuses"),Alerts.success()},function(errorResponse){$scope.error=errorResponse.data.message,Alerts.fail(errorResponse.data.message)})},$scope.find=function(){$scope.recordStatuses=RecordStatuses.query()},$scope.findOne=function(){$scope.recordStatus=RecordStatuses.get({recordStatusId:$stateParams.recordStatusId})}}]),angular.module("record-statuses").factory("RecordStatuses",["$resource",function($resource){return $resource("record-statuses/:recordStatusId",{recordStatusId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Utilisateurs","users","dropdown","/users(/create)?",!1,["superadmin","admin"]),Menus.addSubMenuItem("topbar","users","Gestion des Utilisateurs","users"),Menus.addSubMenuItem("topbar","users","Ajouter Utilisateur","users/create")}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("create",{url:"/users/create",templateUrl:"modules/users/views/authentication/create.client.view.html"}).state("management",{
url:"/users",templateUrl:"modules/users/views/management-users.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("EditUserModalInstanceCtrl",["$scope","$modalInstance","user","roles",function($scope,$modalInstance,user,roles){$scope.init=function(){$scope.roles=roles,$scope.user=user,$scope.user.role=$scope.user.roles[0]},$scope.ok=function(){$scope.user.roles=[$scope.user.role],$modalInstance.close($scope.user)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Alerts","Authentication",function($scope,$http,$location,Users,Alerts,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){Alerts.success(),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message,Alerts.fail($scope.error)})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){Alerts.success(),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message,Alerts.fail($scope.error)})}}]),angular.module("users").controller("UserManagementController",["$scope","$http","$modal","$location","Authentication","Alerts","Users",function($scope,$http,$modal,$location,Authentication,Alerts,Users){$scope.authentication=Authentication;var fillRoles=function(){-1!==Authentication.user.roles.indexOf("superadmin")?$scope.roles=["user","admin","operator"]:$scope.roles=["operator","user"]};fillRoles(),$scope.create=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){Alerts.success(),$location.path("/users")}).error(function(response){$scope.error=response.message,Alerts.fail($scope.error)})},$scope.list=function(){$scope.users=Users.query()},$scope["delete"]=function(userId){$http.put("/users/delete",{id:userId}).success(function(response){Alerts.success(),$scope.users=Users.query()}).error(function(response){$scope.error=response.message,Alerts.fail($scope.error)})},$scope.functionEdit=function(user){var modalInstance=$modal.open({animation:!0,backdrop:"static",templateUrl:"modules/users/views/edit.modal.view.html",controller:"EditUserModalInstanceCtrl",resolve:{user:function(){return user},roles:function(){return $scope.roles}}});modalInstance.result.then(function(updatedUser){$http.put("/users/update",updatedUser).then(function(data){Alerts.success(),$scope.users=Users.query()},function(response){$scope.error=response.message,Alerts.fail($scope.error)})},function(){console.log("dismiss")})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);